{% comment %}
  NUSENSE TryON Script - Shopify Liquid Template
  Include this script to load the NUSENSE TryON widget functionality
{% endcomment %}

{% unless nusense_tryon_disabled %}
  <script>
    // NUSENSE TryON Configuration
    window.NUSENSE_CONFIG = {
      widgetUrl: '{{ settings.nusense_widget_url | default: "http://localhost:8081" }}',
      debug: {{ settings.nusense_debug | default: true }},
      buttonSelector: '{{ settings.nusense_button_selector | default: "#nusense-tryon-btn" }}',
      autoDetect: {{ settings.nusense_auto_detect | default: true }},
      theme: '{{ settings.nusense_theme | default: "default" }}'
    };

    // Initialize image extraction listener for iframe communication
    (function() {
      // Extract product images from the current page
      function extractProductImages() {
        const images = [];
        const seenUrls = new Set();

        // Helper to add image if valid and not duplicate
        function addImage(url, metadata) {
          if (!url || seenUrls.has(url)) return;
          
          const cleanUrl = cleanImageUrl(url);
          if (!cleanUrl || seenUrls.has(cleanUrl)) return;
          
          if (isValidProductImageUrl(cleanUrl, metadata)) {
            images.push(cleanUrl);
            seenUrls.add(cleanUrl);
          }
        }

        // Clean and normalize image URL
        function cleanImageUrl(url) {
          if (!url || typeof url !== 'string') return null;
          
          try {
            const urlObj = new URL(url, window.location.href);
            const keepParams = ['quality', 'format'];
            const params = new URLSearchParams();
            
            for (const [key, value] of urlObj.searchParams.entries()) {
              if (keepParams.includes(key.toLowerCase())) {
                params.set(key, value);
              }
            }
            
            urlObj.search = params.toString();
            return urlObj.href;
          } catch {
            return url;
          }
        }

        // Validate if an image URL is likely a product image
        function isValidProductImageUrl(url, metadata) {
          if (!url) return false;
          
          const lowerUrl = url.toLowerCase();
          const lowerAlt = (metadata?.alt || '').toLowerCase();
          
          const excludePatterns = [
            'logo', 'icon', 'badge', 'payment', 'trust', 'review', 'star',
            'avatar', 'user', 'profile', 'social', 'facebook', 'twitter',
            'instagram', 'pinterest', 'google', 'analytics', 'tracking',
            'pixel', 'spacer', 'blank', 'placeholder', '1x1', 'pixel.gif',
            'transparent', '.svg'
          ];

          for (const pattern of excludePatterns) {
            if (lowerUrl.includes(pattern) || lowerAlt.includes(pattern)) {
              return false;
            }
          }

          const validExtensions = ['.jpg', '.jpeg', '.png', '.webp', '.gif', '.avif'];
          const hasValidExtension = validExtensions.some(ext => lowerUrl.includes(ext));
          
          if (metadata) {
            const { width, height } = metadata;
            if (width && height && width < 150 && height < 150) {
              return false;
            }
          }

          try {
            new URL(url, window.location.href);
          } catch {
            return false;
          }

          return true;
        }

        // Extract from all img elements
        const imgElements = document.querySelectorAll('img');
        imgElements.forEach(img => {
          const sources = [
            img.src,
            img.dataset.src,
            img.dataset.lazySrc,
            img.dataset.originalSrc,
            img.dataset.productImage,
            img.currentSrc,
            img.getAttribute('data-original'),
            img.getAttribute('data-lazy'),
          ].filter(Boolean);

          if (img.srcset) {
            const srcsetUrls = img.srcset.split(',').map(entry => {
              const parts = entry.trim().split(/\s+/);
              return parts[0];
            }).filter(Boolean);
            sources.push(...srcsetUrls);
          }

          sources.forEach(src => {
            addImage(src, {
              width: img.naturalWidth || img.width,
              height: img.naturalHeight || img.height,
              alt: img.alt,
            });
          });
        });

        // Extract from Shopify-specific selectors
        const shopifySelectors = [
          '.product__media img', '.product-image img', '.product-gallery img',
          '.product-photos img', '.product__media-wrapper img', '.product-single__media img',
          '[data-product-image] img', '[data-product-single-media-group] img',
          '.product-images img', '.product-media img', '.flickity-slider img',
          '.swiper-slide img', '.carousel img', '.product-thumbnails img', '.thumbnail img'
        ];

        shopifySelectors.forEach(selector => {
          document.querySelectorAll(selector).forEach(img => {
            if (img instanceof HTMLImageElement) {
              const sources = [
                img.src, img.dataset.src, img.dataset.lazySrc, img.currentSrc
              ].filter(Boolean);
              
              sources.forEach(src => {
                addImage(src, {
                  width: img.naturalWidth || img.width,
                  height: img.naturalHeight || img.height,
                  alt: img.alt,
                });
              });
            }
          });
        });

        return images;
      }

      // Listen for image requests from iframe
      window.addEventListener("message", (event) => {
        if (event.data.type === "NUSENSE_REQUEST_IMAGES") {
          const images = extractProductImages();
          if (event.source && event.source !== window) {
            event.source.postMessage({
              type: "NUSENSE_PRODUCT_IMAGES",
              images: images
            }, "*");
          }
        }
      });

      console.log('NUSENSE TryON: Image extraction listener initialized');
    })();
  </script>

  <script src="{{ settings.nusense_widget_url | default: 'http://localhost:8081' }}/nusense-tryon-widget.js" 
          async 
          defer
          onload="console.log('NUSENSE TryON Widget loaded successfully')"
          onerror="console.error('Failed to load NUSENSE TryON Widget')">
  </script>

  <style>
    /* NUSENSE TryON Widget Styles */
    .nusense-tryon-button {
      font-family: inherit;
      transition: all 0.2s ease;
    }
    
    .nusense-tryon-button:hover {
      transform: scale(1.05);
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    .nusense-tryon-button:active {
      transform: scale(0.98);
    }
    
    /* Mobile responsiveness */
    @media (max-width: 768px) {
      .nusense-tryon-button {
        width: 100%;
        justify-content: center;
        margin: 10px 0;
      }
    }
    
    /* Theme customizations */
    {% if settings.nusense_theme == 'minimal' %}
      .nusense-tryon-button {
        background: #000 !important;
        border: 2px solid #000 !important;
      }
      .nusense-tryon-button:hover {
        background: #333 !important;
        border-color: #333 !important;
      }
    {% elsif settings.nusense_theme == 'colorful' %}
      .nusense-tryon-button {
        background: linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4) !important;
        background-size: 300% 300% !important;
        animation: gradientShift 3s ease infinite !important;
      }
      @keyframes gradientShift {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
      }
    {% endif %}
  </style>
{% endunless %}
